#!/usr/bin/env sbcl --script

(defun fix-line (line)
  "Add opening parenthesis to lines that need it"
  (let ((trimmed (string-left-trim '(#\Space #\Tab) line)))
    (cond
      ;; Already has opening paren or is a comment/blank
      ((or (zerop (length trimmed))
           (char= (char trimmed 0) #\()
           (char= (char trimmed 0) #\;))
       line)
      ;; Line starts with a closing paren - leave as is
      ((char= (char trimmed 0) #\))
       line)
      ;; Common Lisp forms that should have opening paren
      ((or (starts-with trimmed "in-package ")
           (starts-with trimmed "declaim ")
           (starts-with trimmed "defparameter ")
           (starts-with trimmed "defconstant ")
           (starts-with trimmed "defun ")
           (starts-with trimmed "defmethod ")
           (starts-with trimmed "defclass ")
           (starts-with trimmed "defstruct ")
           (starts-with trimmed "defmacro ")
           (starts-with trimmed "let ")
           (starts-with trimmed "let* ")
           (starts-with trimmed "loop")
           (starts-with trimmed "when ")
           (starts-with trimmed "unless ")
           (starts-with trimmed "if ")
           (starts-with trimmed "cond ")
           (starts-with trimmed "case ")
           (starts-with trimmed "handler-case ")
           (starts-with trimmed "handler-bind ")
           (starts-with trimmed "with-")
           (starts-with trimmed "setf ")
           (starts-with trimmed "pushnew ")
           (starts-with trimmed "push ")
           (starts-with trimmed "incf ")
           (starts-with trimmed "decf ")
           (starts-with trimmed "format ")
           (starts-with trimmed "write-")
           (starts-with trimmed "read-")
           (starts-with trimmed "socket-")
           (starts-with trimmed "finish-output")
           (starts-with trimmed "force-output")
           (starts-with trimmed "close ")
           (starts-with trimmed "remove-if")
           (starts-with trimmed "mapcar ")
           (starts-with trimmed "mapc ")
           (starts-with trimmed "find ")
           (starts-with trimmed "lambda ")
           (starts-with trimmed "funcall ")
           (starts-with trimmed "apply ")
           (starts-with trimmed "multiple-value-bind ")
           (starts-with trimmed "destructuring-bind ")
           (starts-with trimmed "return")
           (starts-with trimmed "values")
           (starts-with trimmed "progn ")
           (starts-with trimmed "prog1 ")
           (starts-with trimmed "unwind-protect ")
           (starts-with trimmed "dolist ")
           (starts-with trimmed "dotimes ")
           (starts-with trimmed "make-")
           (starts-with trimmed "gethash ")
           (starts-with trimmed "remhash ")
           (starts-with trimmed "clrhash ")
           (starts-with trimmed "send-")
           (starts-with trimmed "broadcast-")
           (starts-with trimmed "announce-")
           (starts-with trimmed "server-log")
           (starts-with trimmed "bt:")
           (starts-with trimmed "sb-thread:")
           (starts-with trimmed "usocket:")
           (starts-with trimmed "bordeaux-threads:"))
       (concatenate 'string "(" line))
      ;; Default: leave as is
      (t line))))

(defun starts-with (string prefix)
  "Check if string starts with prefix"
  (and (>= (length string) (length prefix))
       (string= string prefix :end1 (length prefix))))

(defun process-file (input-file output-file)
  "Read input file, fix parentheses, write to output file"
  (with-open-file (in input-file :direction :input)
    (with-open-file (out output-file :direction :output
                         :if-exists :supersede
                         :if-does-not-exist :create)
      (loop for line = (read-line in nil nil)
            while line
            do (write-line (fix-line line) out)))))

;; Main execution
(let ((input-file "src/server.lisp")
      (output-file "src/server.lisp.fixed"))
  (format t "Fixing parentheses in ~A...~%" input-file)
  (process-file input-file output-file)
  (format t "Done! Output written to ~A~%" output-file)
  (format t "Review the file and then: mv ~A ~A~%" output-file input-file))
