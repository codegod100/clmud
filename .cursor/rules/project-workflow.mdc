---
alwaysApply: true
---
# CLMUD Workflow Cheatsheet

## Development Preference
- **PREFER INTERACTIVE LISP DEVELOPMENT** - Use `sbcl --script utils/repl.lisp` for interactive debugging and testing
- **OR PROGRAMMATIC LISP** - Pass in Lisp code directly: `sbcl --eval "(load \"src/packages.lisp\") (load \"src/world.lisp\") ..."`
- **AVOID mud.lisp FOR DEBUGGING** - Don't use `sbcl --script mud.lisp` for testing changes; it's for production server startup only
- Avoid server/telnet debugging unless specifically needed for network protocol issues
- Work in the REPL or with direct Lisp evaluation with loaded packages: `mud.world`, `mud.player`, `mud.mob`, `mud.combat`, `mud.quest`, `mud.server`

## Server Testing (when needed)
- Run `./dev.sh validate` after edits for balance + compilation; use `./dev.sh balance` when checking structure mid-edit.
- Keep edits s-expression-safe; prefer the helpers and guidance in [DEVELOPMENT.md](mdc:docs/DEVELOPMENT.md) and store tooling in `tools/`.
- For diagnostics, rely on the `dev.sh` subcommands (`check`, `test`, `clean`) described in [DEVELOPMENT.md](mdc:docs/DEVELOPMENT.md).

## Code Checks & Validation
- **DO NOT START MUD SERVER during code checks** - Use compilation-only validation
- For syntax/compilation checks, use: `./scripts/dev.sh check` (compilation only)
- For balance checks only, use: `./scripts/dev.sh balance` (parenthesis balance)
- For full validation with server start, use: `./scripts/dev.sh validate` (only when testing gameplay)
- Only start the actual MUD server when explicitly testing gameplay or network functionality
- Avoid `sbcl --script mud.lisp` for code validation - use the dev.sh commands instead

## Testing

- **ALWAYS create new test files in the `tests/` directory** - never in the project root
- **KEEP test files** - Don't delete them after testing; they serve as documentation and regression tests
- Use the organized test structure:
  - `tests/unit/` - Unit tests for individual components
  - `tests/commands/` - Command-specific tests  
  - `tests/integration/` - Integration tests for workflows
- Run tests with `./dev.sh tests` (all), `./dev.sh tests-unit`, `./dev.sh tests-cmd`, or `./dev.sh tests-int`
- Individual test files can be run directly: `sbcl --script tests/unit/test-command-registration.lisp`
- Follow the test naming convention: `test-<descriptive-name>.lisp`
- Include proper error handling with `handler-case` in test files
- See [tests/README.md](mdc:tests/README.md) for detailed testing guidelines
