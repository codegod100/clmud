(in-package :mud.ansi)

(defun make-ansi-code (code)
  "Create an ANSI escape sequence"
  (format nil "~C[~Am" (code-char 27) code))

(defparameter *ansi-table* nil
  "ANSI color code lookup table")

(setf *ansi-table*
      (list (cons :reset (make-ansi-code "0"))
            (cons :bold (make-ansi-code "1"))
            (cons :faint (make-ansi-code "2"))
            (cons :italic (make-ansi-code "3"))
            (cons :underline (make-ansi-code "4"))
            (cons :blink (make-ansi-code "5"))
            (cons :inverse (make-ansi-code "7"))
            (cons :hidden (make-ansi-code "8"))
            (cons :black (make-ansi-code "30"))
            (cons :red (make-ansi-code "31"))
            (cons :green (make-ansi-code "32"))
            (cons :yellow (make-ansi-code "33"))
            (cons :blue (make-ansi-code "34"))
            (cons :magenta (make-ansi-code "35"))
            (cons :cyan (make-ansi-code "36"))
            (cons :white (make-ansi-code "37"))
            (cons :bright-black (make-ansi-code "90"))
            (cons :bright-red (make-ansi-code "91"))
            (cons :bright-green (make-ansi-code "92"))
            (cons :bright-yellow (make-ansi-code "93"))
            (cons :bright-blue (make-ansi-code "94"))
            (cons :bright-magenta (make-ansi-code "95"))
            (cons :bright-cyan (make-ansi-code "96"))
            (cons :bright-white (make-ansi-code "97"))
            (cons :bg-black (make-ansi-code "40"))
            (cons :bg-red (make-ansi-code "41"))
            (cons :bg-green (make-ansi-code "42"))
            (cons :bg-yellow (make-ansi-code "43"))
            (cons :bg-blue (make-ansi-code "44"))
            (cons :bg-magenta (make-ansi-code "45"))
            (cons :bg-cyan (make-ansi-code "46"))
            (cons :bg-white (make-ansi-code "47"))
            (cons :bg-bright-black (make-ansi-code "100"))
            (cons :bg-bright-red (make-ansi-code "101"))
            (cons :bg-bright-green (make-ansi-code "102"))
            (cons :bg-bright-yellow (make-ansi-code "103"))
            (cons :bg-bright-blue (make-ansi-code "104"))
            (cons :bg-bright-magenta (make-ansi-code "105"))
            (cons :bg-bright-cyan (make-ansi-code "106"))
            (cons :bg-bright-white (make-ansi-code "107"))))

(defun %normalize-key (key)
  (etypecase key
    (symbol key)
    (string (intern (string-upcase key) :keyword))))

(defun code (name)
  (let* ((key (%normalize-key name))
         (pair (assoc key *ansi-table* :test #'eq)))
    (cdr pair)))

(defun wrap (text &rest styles)
  (let ((reset (or (code :reset) "")))
    (with-output-to-string (out)
      (dolist (style styles)
        (let ((seq (code style)))
          (when (and seq (plusp (length seq)))
            (write-string seq out))))
      (write-string text out)
      (write-string reset out))))

(defun strip (text)
  (with-output-to-string (out)
    (let ((len (length text))
          (idx 0))
      (loop while (< idx len) do
        (let ((ch (char text idx)))
          (if (and (char= ch (code-char 27))
                   (< (1+ idx) len)
                   (char= (char text (1+ idx)) #\[))
              (let ((end (or (position #\m text :start (+ idx 2))
                             (1- len))))
                (setf idx (1+ end)))
              (progn
                (write-char ch out)
                (incf idx))))))))

(defun gradient (text colors)
  (let* ((color-codes (remove-if (lambda (seq) (or (null seq) (zerop (length seq))))
                                 (mapcar #'code colors)))
         (palette-size (length color-codes)))
    (if (zerop palette-size)
        text
        (with-output-to-string (out)
          (let ((len (length text)))
            (dotimes (idx len)
              (let ((seq (nth (mod idx palette-size) color-codes)))
                (write-string seq out)
                (write-char (char text idx) out)))
            (write-string (code :reset) out))))))
